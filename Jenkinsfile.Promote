pipeline {
    agent {
        node {
            label 'nodejs'
        }
    }
    options{
        buildDiscarder(
            logRotator(daysToKeepStr: '5', numToKeepStr: '5')
        )
        disableConcurrentBuilds()
    }
    // parameters {

    //     extendedChoice(
    //         name: 'TagName',
    //         defaultValue: '',
    //         description: 'tag name',
    //         type: 'PT_SINGLE_SELECT',
    //         groovyScript: """def gettags = ("git ls - remote - t https://github.com/ivid-123/demoapp.git").execute()
    //            return gettags.text.readLines().collect { it.split()[1].replaceAll('refs/tags/', '').replaceAll("\\\\^\\\\{\\\\}", '') }
    //     """,)
    // }
    environment {
        SPA_NAME = "video-tool"
        EXECUTE_VALIDATION_STAGE = "true"
        EXECUTE_VALID_PRETTIER_STAGE = "true"
        EXECUTE_VALID_TSLINT_STAGE = "true"
        EXECUTE_TEST_STAGE = "true"
        EXECUTE_TAG_STAGE = "true"
        EXECUTE_BUILD_STAGE = "true"

        APPLICATION_NAME = 'video-tool-app'
        //  GIT_REPO = "https://github.com/ivid-123/demoapp.git"
        // GIT_BRANCH = "develop"
        STAGE_TAG = "promoteToQA"
        DEV_TAG = "1.0"
        DEV_PROJECT = "qa"
        STAGE_PROJECT = "stage"
        TEMPLATE_NAME = "video-tool-template"
        ARTIFACT_FOLDER = "target"
        PORT = 8080;
        MAIL_TO = 'ashish.mishra2@soprasteria.com,arvind.singh@soprasteria.com,pallav.narang@soprasteria.com,jenkinstestuser01@gmail.com'
        // astha.bansal@soprasteria.com
    }
    // parameters {
    //     gitParameter name: 'TAG',
    //         type: 'PT_TAG',
    //             defaultValue: 'release'
    // }
    parameters {
        gitParameter name: 'TAG',
            type: 'PT_TAG',
                defaultValue: 'master'
    }
    stage('Print version1') {
        steps {
            echo '${params.TAG}'
        }
    }
    stages {
        stage('Example') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: "${params.TAG}"]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [],
                    gitTool: 'Default',
                    submoduleCfg: [],
                    userRemoteConfigs: [[url: 'https://github.com/ivid-123/demoapp.git']]
                ])
            }
        }
        stage('Print version') {
            steps {
                echo '${params.TAG}'
            }
        }
        // stage('Checkout') {
        //     steps {

        //         script{
        //             git credentialsId: '', url: 'https://github.com/ivid-123/demoapp.git'
        //             sh 'git branch -r | awk \'{print $1}\' ORS=\'\\n\' >>branch.txt'
        //         }

        //         // checkout([$class: 'GitSCM',
        //         //     branches: [[name: "${params.TAG}"]],
        //         //     doGenerateSubmoduleConfigurations: false,
        //         //     extensions: [],
        //         //     gitTool: 'Default',
        //         //     submoduleCfg: [],
        //         //     userRemoteConfigs: [[url: 'https://github.com/ivid-123/demoapp.git']]
        //         // ])
        //     }
        // }
        // stage('get build Params User Input') {
        //     steps{
        //         script{

        //             liste = readFile 'branch.txt'
        //             echo "please click on the link here to chose the branch to build"
        //             env.BRANCH_SCOPE = input message: 'Please choose the branch to build ', ok: 'Validate!',
        //                 parameters: [choice(name: 'BRANCH_NAME', choices: "${liste}", description: 'Branch to build?')]


        //         }
        //     }
        // }
        // stage("checkout the branch"){
        //     steps{
        //         echo "${env.BRANCH_SCOPE}"
        //         git  credentialsId: '', url: 'https://github.com/ivid-123/demoapp.git'
        //         sh "git checkout -b build ${env.BRANCH_NAME}"
        //     }
        // }
        stage('Promote to STAGE?') {
            steps {
                timeout(time: 15, unit: 'MINUTES') {
                    input message: "Promote to STAGE?", ok: "Promote"
                }
                script {
                    openshift.withCluster() {
                        /**
                        *   should have permissions to push/pull images from 'dev' and push/pull images to 'stage' 
                        *   We tag our image, making it available in stage namespace
                        */
                        openshift.tag("${DEV_PROJECT}/${TEMPLATE_NAME}:latest", "${STAGE_PROJECT}/${TEMPLATE_NAME}:${STAGE_TAG}")
                    }
                }
            }
        }
        stage('Rollout to STAGE') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(STAGE_PROJECT) {
                            // delete service, route, deployment config of that deployment
                            if (openshift.selector('dc', '${TEMPLATE_NAME}').exists()) {
                                openshift.selector('dc', '${TEMPLATE_NAME}').delete()
                                openshift.selector('svc', '${TEMPLATE_NAME}').delete()
                                openshift.selector('route', '${TEMPLATE_NAME}').delete()
                            }
                            //create a new app using the new image promoted in last step
                            openshift.newApp("${TEMPLATE_NAME}:${STAGE_TAG}").narrow("svc").expose("--port=${PORT}")
                        }
                    }
                }
            }
            // post {
            //     success {
            //         //cest = TimeZone.getTimeZone("CEST")
            //         emailext body: '''${SCRIPT, template="groovy-html.template"}''',
            //             //emailext body: "${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n More info at: ${env.BUILD_URL}",
            //             mimeType: 'text/html',
            //                 subject: "Jenkins Build [${BUILD_STATUS}]: ${PROJECT_NAME} - Build # ${BUILD_NUMBER}",
            //                     //  subject: "$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!",
            //                     to: "${MAIL_TO}",
            //                         replyTo: "${MAIL_TO}"
            //     }
            // }
        }
        stage('Scale in STAGE') {
            steps {
                script {
                    openshiftScale(namespace: "${STAGE_PROJECT}", deploymentConfig: "${TEMPLATE_NAME}", replicaCount: '1')
                }
            }
        }

    }
    //comment
    // post {
    //     failure {

    //         emailext body: '''${SCRIPT, template="groovy-html.template"}''',
    //             mimeType: 'text/html',
    //                  subject: "Jenkins Build [${BUILD_STATUS}]: ${PROJECT_NAME} - Build # ${BUILD_NUMBER}",
    //                     //   subject: "$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!",
    //                     to: "${MAIL_TO}",
    //                         replyTo: "${MAIL_TO}",
    //                             recipientProviders: [[$class: 'CulpritsRecipientProvider']]
    //     }

    // }

}